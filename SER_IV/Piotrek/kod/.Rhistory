prayleigh
pweibull
2 < 3 + 1
2 < (3 + 1)
library(mapdata)
install.packages("mapdata")
library(maps)
?map
map()
map()
?map
install.packages("mapdata")
install.packages("mapdata")
install.packages("mapdata")
worldMapEnv
data(worldMapEnv)
worldMapEnv
library(mapdata)
?mapdata
mapdata:::.onLoad
map()
map()
?map
map('world','poland')
map('world','europe')
?map
worldMapEnv
ls()
map('world', fill = TRUE, col = 1:10)
map('world', fill = TRUE, col = 1:12)
map('world', c('poland','germany'))
map('world', c('poland','germany','korea'))
map('world', c('poland','germany','japan'))
map('world', c('poland','germany','japan','south korea'))
map('world', c('poland','germany','japan','south korea','usa'))
map('world', c('poland','germany','japan','south korea','usa'), col=1:3)
map('world', c('poland','germany','japan','south korea','usa'), col=1:3,fill=T)
map('worldHiresMapEnv')
map('worldHires')
map('worldHires','poland')
map('world','poland')
map('worldHires','poland')
map('world','poland')
library(rworldmap)
data(countryExData)
countryExData
str(countryExData)
data(countryExData)
sPDF <- joinCountryData2Map( countryExData
,joinCode = "ISO3"
,nameJoinColumn = "ISO3V10")
mapDevice() #create world map shaped window
mapCountryData(sPDF
,nameColumnToPlot='BIODIVERSITY')
LETTERS["Y"]
sum(LETTERS== "Y")
which(LETTERS== "Y")
which(LETTERS== "E")
which(LETTERS== "S")
library("devtools")
install_github("bgmm","pbiecek")
library(bgmm)
load("c:/Users/Przemyslaw/Downloads/tr.RData")
load("c:/Users/Przemyslaw/Downloads/t.RData")
load("c:/Users/Przemyslaw/Downloads/l.RData")
load("c:/Users/Przemyslaw/Downloads/t.RData")
v
modelSemiSupervised = semisupervised( X = t, knowns = tr, class = l )
res = predict( modelSemiSupervised, t )
str(res)
a <- 1:4
(a[2] <- 3)
sample(2, 1:96, replacement=TRUE)
sample(2, 1:96, replace==TRUE)
sample(2, 1:96, replace=TRUE)
sample(2, 1:6, replace=TRUE)
?sample(2, 1:6, replace=TRUE)
sample(1:6, 2, replace=TRUE)
sample(1:6, 2, replace=TRUE)
sample(1:6, 2, replace=FALSE)
sample(1:6, 2, replace=FALSE)
sample(1:6, 2, replace=FALSE)
sample(1:6, 2, replace=FALSE)
sample(1:6, 2, replace=FALSE)
sample(1:6, 5, replace=FALSE)
sample(1:6, 5, replace=FALSE)
sample(1:6, 5, replace=FALSE)
sample(1:6, 5, replace=FALSE)
sample(1:6, 5, replace=TRUE)
set.seed(1313); sample(1:96, 2, replace=FALSE)
set.seed(1313); sample(1:96, 2, replace=FALSE)
set.seed(1313); sample(1:96, 2, replace=FALSE) - 11 - 12
set.seed(1313); sample(1:96, 2, replace=FALSE) - 11 - 12 - 10
set.seed(1313); sample(1:96, 2, replace=FALSE) - 11 - 12 - 10 - 9 - 7
set.seed(1313); sample(1:96, 2, replace=FALSE) - 11 - 12 - 10 - 9 - 7 - 29
set.seed(1313); sample(1:96, 4, replace=FALSE)
set.seed(1313); sample(1:96, 4, replace=FALSE)- 11 - 12 - 10
set.seed(1313); sample(1:96, 4, replace=FALSE)- 11 - 12 - 10 - 9
set.seed(1313); sample(1:96, 4, replace=FALSE)- 11 - 12 - 10 - 9 - 7
set.seed(1313); sample(1:96, 4, replace=FALSE)
par(mar=c(0,0,0,0))
plot(c(-2,2),c(-0.2,2),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n")
#arrows(-3,0,3,0,lwd=3,angle=15, length=0.5)
arrows(-1.5,-0.2,-1.5,2,lwd=3,angle=15, length=0.5)
curve(1-x^6,-1.2,1.2,add=T,lwd=3,col="grey90")
curve(1-x^4,-1.2,1.2,add=T,lwd=3,col="grey50")
curve(1-abs(x^3),-1.2,1.2,add=T,lwd=3,col="grey30")
curve(1-x^2,-1.2,1.2,add=T,lwd=3,col="grey20")
curve(1-abs(x),-1.2,1.2,add=T,lwd=3,col="grey10")
curve(cos(30*x)/20, -0.75, -0.3,add=T, lwd=3,col="red")
curve(cos(30*x)/20, 0.75, 0.3,add=T, lwd=3,col="red")
axis(2,line=-5.3,at=seq(0,1.6,0.02),labels=F,tcl=-0.3)
axis(2,line=-5.3,at=seq(0,1.6,0.1),labels=F,tcl=-0.5)
axis(2,line=-5.3,at=seq(0.2,1.6,0.2),labels=T,tcl=-0.8,las=2,cex.axis=0.8)
text(0.55,0.35,expression(y==1-abs(x)),srt=-60, col="grey10")
text(0.63,0.47,expression(y==1-x^2),srt=-67, col="grey20")
text(0.9,0.55,expression(y==1-x^6),srt=-80, col="grey50")
w1 = rbeta(30,2,2) -0.5
w2 = rbeta(30,2,2) -0.5
w1 = rnorm(40,0,0.2)
w2 = rnorm(40,0,0.2)
x = w1 - 0.1
y = w1/3+w2/2 + 0.4
points(x,y, pch=19, cex=0.7)
data.ellipse(x,y,add=T,plot.points=F,levels=c(0.4,0.85), center.cex=0)
par(mar=c(0,0,0,0))
plot(c(-2,2),c(-0.2,2),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n")
#arrows(-1.5,-0.2,-1.5,2,lwd=3,angle=15, length=0.5)
arrows(-1.5,0,-1.5,2,lwd=3,angle=15, length=0.5)
axis(2,line=-5.3,at=seq(0,1.6,0.02),labels=F,tcl=-0.3)
axis(2,line=-5.3,at=seq(0,1.6,0.1),labels=F,tcl=-0.5)
axis(2,line=-5.3,at=seq(0.2,1.6,0.2),labels=T,tcl=-0.8,las=2,cex.axis=0.8)
xx = seq(-1.2,1.2,0.01)
lines(xx + (1 - xx^2)/25 - 1/50, 1-xx^6      ,lwd=3,col="grey90")
lines(xx + (1 - xx^2)/25 - 1/50, 1-xx^4      ,lwd=3,col="grey50")
lines(xx + (1 - xx^2)/25 - 1/50, 1-abs(xx^3) ,lwd=3,col="grey30")
lines(xx + (1 - xx^2)/25 - 1/50, 1-xx^2      ,lwd=3,col="grey20")
lines(xx + (1 - xx^2)/25 - 1/50, 1-abs(xx)   ,lwd=3,col="grey10")
curve(cos(30*x)/20, -0.75, -0.3,add=T, lwd=3,col="red")
curve(cos(30*x)/20, 0.75, 0.3,add=T, lwd=3,col="red")
text(0.55,0.35,expression(y==1-abs(x)),srt=-60, col="grey10")
text(0.63 - 0.01,0.47,expression(y==1-x^2),srt=-67, col="grey20")
text(0.9  - 0.02, 0.55,expression(y==1-x^6),srt=-80, col="grey50")
xt = x-z/25
points(xt,y, pch=19, cex=0.7)
#data.ellipse(x,y,add=T,plot.points=F,levels=c(0.4,0.85), center.cex=0)
w1 = rbeta(30,2,2) -0.5
w2 = rbeta(30,2,2) -0.5
w1 = rnorm(40,0,0.2)
w2 = rnorm(40,0,0.2)
w3 = rnorm(40,0,0.2)
x = w1 - 0.1
y = w1/3+w2/2 + 0.4
z = w3/ (1 + x^2 + y^2)
x = w1 - 0.01
y = w2/2 + 0.4
z = 0.5 -w3/ (1 + w1^2 + w2^2)
par(mar=c(0,0,0,0))
plot(c(-2,2),c(-0.2,2),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n")
xx = seq(-1.2,1.2,0.01)
lines(xx - (1 - xx^2)/25 + 1/50, 1-xx^6      ,lwd=3,col="grey90")
lines(xx - (1 - xx^2)/25 + 1/50, 1-xx^4      ,lwd=3,col="grey50")
lines(xx - (1 - xx^2)/25 + 1/50, 1-abs(xx^3) ,lwd=3,col="grey30")
lines(xx - (1 - xx^2)/25 + 1/50, 1-xx^2      ,lwd=3,col="grey20")
lines(xx - (1 - xx^2)/25 + 1/50, 1-abs(xx)   ,lwd=3,col="grey10")
curve(cos(30*x)/20, -0.75, -0.3,add=T, lwd=3,col="red")
curve(cos(30*x)/20, 0.75, 0.3,add=T, lwd=3,col="red")
text(0.55,0.35,expression(y==1-abs(x)),srt=-60, col="grey10")
text(0.63 + 0.01,0.47,expression(y==1-x^2),srt=-67, col="grey20")
text(0.9  + 0.02, 0.55,expression(y==1-x^6),srt=-80, col="grey50")
xt = x+z/25
points(xt,y, pch=19, cex=0.7)
#data.ellipse(x,y,add=T,plot.points=F,levels=c(0.4,0.85), center.cex=0)
dev.off()
library(devtools)
install_github("PISA2012lite", "pbiecek")
library(PISA2012lite)
library("devtools")
install_github("PISA2012lite", "pbiecek")
1100*35
rpoiss(100)
rpois(100)
rpois(1,100)
rpois(1,100)
ppois(100,100)
ppois(100,150)
ppois(10,15)
cpois(100,150)
ppois(10,5)
install.packages("streamR")
install.packages("ROAuth")
library(ROAuth)
library(streamR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret, requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret, requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret, requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
system.file("CurlSSL", "cacert.pem", package = "RCurl")
consumerKey <- "438491318-nxqkSnwXFHux1FVF9FqsgeDZzdhoZcGc9yCYcDic"
consumerSecret <- "wNPSzzx7dv310Hbrxo5MCspxJpDNyzjOOUrRI02SaxM"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret, requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
oauthKey <- "438491318-nxqkSnwXFHux1FVF9FqsgeDZzdhoZcGc9yCYcDic"
oauthSecret <- "wNPSzzx7dv310Hbrxo5MCspxJpDNyzjOOUrRI02SaxM"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,
oauthKey =oauthKey,
oauthSecret = oauthSecret,
requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
oauthKey <- "438491318-nxqkSnwXFHux1FVF9FqsgeDZzdhoZcGc9yCYcDic"
oauthSecret <- "wNPSzzx7dv310Hbrxo5MCspxJpDNyzjOOUrRI02SaxM"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,
oauthKey =oauthKey,
oauthSecret = oauthSecret,
requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
system( paste0( "curl http://curl.haxx.se/ca/cacert.pem -o " , tempdir() , "/cacert.pem" ) )
library(RCurl)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
library(twitteR)
library(httr)
library(ROAuth)
library(streamR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
oauthKey <- "438491318-nxqkSnwXFHux1FVF9FqsgeDZzdhoZcGc9yCYcDic"
oauthSecret <- "wNPSzzx7dv310Hbrxo5MCspxJpDNyzjOOUrRI02SaxM"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,
oauthKey =oauthKey,
oauthSecret = oauthSecret,
requestURL=requestURL,accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file="my_oauth.rda")
filterStream( file.name="sochi2014b.json", track="sochi2014", tweets=10, oauth=my_oauth )
?filterStream
filterStream( file="sochi2014.json", track="sochi2014", timeout=360, oauth=my_oauth  )
filterStream( file="sochi2014c.json", track="sochi2014", timeout=60, oauth=my_oauth , locations=c(-180,-90,180,90))
parseTweets(="sochi2014c.json", simplify = FALSE, verbose = TRUE)
parseTweets(="sochi2014c.json", simplify = FALSE, verbose = TRUE)
parseTweets("sochi2014c.json", simplify = FALSE, verbose = TRUE)
teee <- parseTweets("sochi2014c.json", simplify = FALSE, verbose = TRUE)
str(teee)
plot(teee$place_lat, teee$place_lon)
filterStream( file="sochi2014d.json", track="sochi2014", timeout=3600, oauth=my_oauth , locations=c(-180,-90,180,90))
teee <- parseTweets("sochi2014d.json", simplify = FALSE, verbose = TRUE)
dim(teee)
head(teee,2)
plot(teee$place_lat, teee$place_lon, pch='.')
save(teee, file="teee.rda")
taaa=1
gc()
library(RCurl)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
library(twitteR)
library(httr)
library(ROAuth)
library(streamR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "lo3DCTVzId30ZPiADzQHQ"
consumerSecret <- "D9dufRy0Qaz9X2X6CbN7Bi3xe53SKgg2lBliGOtBNus"
oauthKey <- "438491318-nxqkSnwXFHux1FVF9FqsgeDZzdhoZcGc9yCYcDic"
oauthSecret <- "wNPSzzx7dv310Hbrxo5MCspxJpDNyzjOOUrRI02SaxM"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
oauthKey = oauthKey, oauthSecret = oauthSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
pre <- gsub(as.character(Sys.time()), pattern="[^0-9]", replacement="")
cat(pre,"\n")
repeat({
pre <- gsub(as.character(Sys.time()), pattern="[^0-9]", replacement="")
cat(pre,"\n")
#  filterStream( file=paste0("/Users/pbiecek/Desktop/_sochi2014_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
filterStream( file=paste0("c:/_Przemek_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
})
repeat({
pre <- gsub(as.character(Sys.time()), pattern="[^0-9]", replacement="")
cat(pre,"\n")
#  filterStream( file=paste0("/Users/pbiecek/Desktop/_sochi2014_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
filterStream( file=paste0("c:/_Przemek_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
})
repeat({
pre <- gsub(as.character(Sys.time()), pattern="[^0-9]", replacement="")
cat(pre,"\n")
#  filterStream( file=paste0("/Users/pbiecek/Desktop/_sochi2014_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
filterStream( file=paste0("c:/_Przemek_/sochi2014_",pre,".json"), track="sochi2014", timeout=60*60, oauth=my_oauth , locations=c(-180,-90,180,90))
})
install.packages("randomForestSRC")
install.packages("survival")
install.packages("knitr")
install.packages("stringr")
install.packages("shiny")
install.packages("shinyAce")
install.packages("Hmisc")
install.packages("markdown")
install.packages("sm")
library(devtools)
install_github("ShinySky","AnalytixWare")
library(shinysky)
"a" > "b"
factor("a") > factor("b")
base::c
c <- base::c
c(1,2,3)
readLines("clipboard")
unique(readLines("clipboard"))
maile1 <- unique(readLines("clipboard"))
maile2 <- unique(readLines("clipboard"))
length(maile1)
length(maile2)
setdiff(maile1, maile2)
writeLines(setdiff(maile1, maile2), con="clipboard")
library(IRanges) #Bioconductor
library(GenomicRanges) #Bioconductor
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
library(GenomicRanges) #Bioconductor
library(IRanges) #Bioconductor
library(GenomicRanges) #Bioconductor
library(rtracklayer)#Bioconductor
biocLite("rtracklayer")
library(rtracklayer)#Bioconductor
library(Biostrings)#Bioconductor
library(BSgenome.Hsapiens.UCSC.hg19)#Bioconductor
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)#Bioconductor
library(BSgenome.Hsapiens.UCSC.hg19)#Bioconductor
library(IRanges) #Bioconductor
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
library(IRanges) #Bioconductor
library(GenomicRanges) #Bioconductor
library(rtracklayer)#Bioconductor
library(Biostrings)#Bioconductor
library(BSgenome.Hsapiens.UCSC.hg19)#Bioconductor
ls()
str(BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19)
dim(BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19)
dim(BSgenome.Hsapiens.UCSC.hg19::Hsapiens)
str(BSgenome.Hsapiens.UCSC.hg19::Hsapiens)
library(IRanges) #Bioconductor
library(GenomicRanges) #Bioconductor
library(rtracklayer)#Bioconductor
library(Biostrings)#Bioconductor
library(BSgenome.Hsapiens.UCSC.hg19)#Bioconductor
x <- runif(1000) * 3
y <- exp(x) + runif(1000)
plot(x,y)
z <- cbind(x,y)
cov(z)
cor(z)
princomp(z)
summary(princomp(z))
x <- runif(1000) * 3
y <- exp(x) + runif(1000)*5
plot(x,y)
z <- cbind(x,y)
cov(z)
cor(z)
summary(princomp(z))
x <- runif(1000) * 3
y <- exp(x) + runif(1000)*25
plot(x,y)
z <- cbind(x,y)
cov(z)
cor(z)
summary(princomp(z))
str(princomp(z))
plot(z2[,1],z2[,1])
z2 <- princomp(z)$scores
plot(z2[,1],z2[,2])
plot(x,y)
plot(z2[,1],z2[,2])
cor(z)
summary(princomp(z))
prcomp(z)
prcomp(z, scale.=TRUE)
prcomp(z)
readLines("clipboard")
sample(readLines("clipboard"))
sample(readLines("clipboard"))
sample(readLines("clipboard"))
sample(readLines("clipboard"))
dev.off)_
dev.off()
setwd("c:/_Przemek_/Dropbox/_Praca_/SERIV/Piotrek/kod")
cytoBands <- read.csv("data/ChromosomeBand_hg19.csv", sep="\t")
head(cytoBands)
library(quantsmooth) ##przyklad z podrecznika
source("http://bioconductor.org/biocLite.R")
biocLite("quantsmooth")
library(quantsmooth) ##przyklad z podrecznika
install.packages("SparseM")
library(quantsmooth) ##przyklad z podrecznika
plot(c(0,4),c(0,3),type="n",xaxt="n",yaxt="n",xlab="",ylab="")
drawSimpleChrom(2,3,fill=c("p","q3"),col=c("red","blue"),orientation="v")
dev.off()
library(IRanges) #
setwd("c:/_Przemek_/Dropbox/_Praca_/SERIV/Piotrek/kod")
cytoBands <- read.csv("data/ChromosomeBand_hg19.csv", sep="\t")
head(cytoBands)
genes <- read.csv("data/RefSeq_hg19.csv", sep="\t")
genes[1,]
table(genes$chrom)
chroms <- paste("chr", c(1:22, "X", "Y"), sep="")
genes.proc <- genes[genes$chrom %in% chroms,]
g.chr1 <- genes.proc[genes.proc$chrom == "chr1",]
library(IRanges) #Bioconductor
ir <- IRanges(g.chr1$txStart, g.chr1$txEnd)
ir
head(ir)
cytoBands <- read.csv("data/ChromosomeBand_hg19.csv", sep="\t")
head(cytoBands)
genes <- read.csv("data/RefSeq_hg19.csv", sep="\t")
genes[1,]
table(genes$chrom)
chroms <- paste("chr", c(1:22, "X", "Y"), sep="")
genes.proc <- genes[genes$chrom %in% chroms,]
g.chr1 <- genes.proc[genes.proc$chrom == "chr1",]
library(IRanges) #Bioconductor
ir <- IRanges(g.chr1$txStart, g.chr1$txEnd)
head(ir)
width(ir)
ir2 <- ir[1:4]
width(ir2)
ir2 + 1
ir2
shift(ir2, 1)
ir3 <- IRanges(1:5, 3:7)
ir3
reduce(ir3)
ir4 <- IRanges(c(1,5,8), c(2,9,9))
gaps(ir4)
shift(ir4, 3)
intersect(ir3, ir4)
pintersect(ir3, ir4) #blad - dlaczego?
pintersect(ir4, ir3[1:3], resolve.empty="start.x")
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),
col = "black", sep = 0.5, ...)
{
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)), max(end(xlim)))
bins <- disjointBins(IRanges(start(x), end(x) + 1))
plot.new()
plot.window(xlim, c(0, max(bins)*(height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x)-0.5, ybottom, end(x)+0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
plotRanges(ir3)
plotRanges(ir4)
plotRanges(reduce(ir4))
findOverlaps(ir3, ir4)
countOverlaps(ir3, ir4)
genMaxLen <- numeric(length(chroms))
for (i in 1:length(chroms)){
chr <- chroms[i]
g <- genes[genes$chrom == chr,]
ir <- IRanges(g$txStart, g$txEnd)
genMaxLen[i] <- max(width(ir))
}
chroms[wh
]
genMaxLen
chroms[which.max(genMaxLen)] #na ktorym chromosomie jest najdluzszy gen
coveredByGene <- numeric(length(chroms))
for (i in 1:length(chroms)){
chr <- chroms[i]
g <- genes[genes$chrom == chr,]
ir <- IRanges(g$txStart, g$txEnd)
coveredByGene[i] <- sum(width(reduce(ir)))
}
barplot(coveredByGene)
segDups <- read.csv("data/SegmentalDups_hg19.csv", sep="\t")
segDups[1,]
segDups.1 <- segDups[segDups$chrom == segDups$otherChrom,]
segDups.1$Distance <- segDups.1$otherStart - segDups.1$chromEnd + 1
segDups.1$chromSize <- segDups.1$chromEnd - segDups.1$chromStart + 1
segDups.2 <- segDups.1[(segDups.1$Distance > 5e3) & (segDups.1$Distance < 1e7),]
segDups.3 <- segDups.2[(segDups.2$chromSize > 2e3) & (segDups.2$otherSize > 2e3),]
segDups.4 <- segDups.3[segDups.3$fracMatch > 0.95,]
segDups.5 <- segDups.4[segDups.4$strand == "+",]
nrow(segDups.5)
